# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: docker:17.05.0-ce-git
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Weather app
          command: docker build . -t weather
      - run:
          name: Run Weather app
          command: docker run -d -p 5000:5000 --name weather weather        
      - run:
          name: Run tests
          command: docker exec weather python3 WeatherAppTest.py
  push-to-gitlab-registry:
    docker:
      - image: docker:stable-git
    environment:
      IMAGE_VERSION: "1.0.0"  
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and tag Docker image
          command: |
              docker build -t registry.gitlab.com/devops2695516/CircleCIProj/weatherapp:${IMAGE_VERSION} .
              docker tag registry.gitlab.com/devops2695516/CircleCIProj/weatherapp:${IMAGE_VERSION} registry.gitlab.com/devops2695516/CircleCIProj/weatherapp:latest
      - run:
          name: Push Docker image to GitLab registry
          command: |
              echo "$GITLAB_REGISTRY_PASSWORD" | docker login -u "$GITLAB_REGISTRY_USER" --password-stdin registry.gitlab.com
              docker push registry.gitlab.com/devops2695516/CircleCIProj/weatherapp:${IMAGE_VERSION}
              docker push registry.gitlab.com/devops2695516/CircleCIProj/weatherapp:latest
    

workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
      - push-to-gitlab-registry:
          post-steps:
            - run:
                name: Update version number
                command: |
                  echo $((${IMAGE_VERSION//./} + 1)) | sed 's/.\{1\}/&./g;s/\.$//' # Increment the version number
                  echo "IMAGE_VERSION=$((${IMAGE_VERSION//./} + 1)) | sed 's/.\{1\}/&./g;s/\.$//'" >> $BASH_ENV
     
